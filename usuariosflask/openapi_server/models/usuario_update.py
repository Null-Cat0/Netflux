from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.perfil import Perfil
from openapi_server import util

from openapi_server.models.perfil import Perfil  # noqa: E501

class UsuarioUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, nombre=None, correo_electronico=None, password=None, pais=None, plan_suscripcion=None, dispositivos=None, perfiles=None):  # noqa: E501
        """UsuarioUpdate - a model defined in OpenAPI

        :param id: The id of this UsuarioUpdate.  # noqa: E501
        :type id: int
        :param nombre: The nombre of this UsuarioUpdate.  # noqa: E501
        :type nombre: str
        :param correo_electronico: The correo_electronico of this UsuarioUpdate.  # noqa: E501
        :type correo_electronico: str
        :param pais: The pais of this UsuarioUpdate.  # noqa: E501
        :type pais: str
        :param plan_suscripcion: The plan_suscripcion of this UsuarioUpdate.  # noqa: E501
        :type plan_suscripcion: str
        :param dispositivos: The dispositivos of this UsuarioUpdate.  # noqa: E501
        :type dispositivos: List[str]
        :param perfiles: The perfiles of this UsuarioUpdate.  # noqa: E501
        :type perfiles: List[Perfil]
        """
        self.openapi_types = {
            'id': int,
            'nombre': str,
            'correo_electronico': str,
            'password': str,
            'pais': str,
            'plan_suscripcion': str,
            'dispositivos': List[str],
            'perfiles': List[Perfil]
        }

        self.attribute_map = {
            'id': 'id',
            'nombre': 'nombre',
            'correo_electronico': 'correo_electronico',
            'password': 'password',
            'pais': 'pais',
            'plan_suscripcion': 'plan_suscripcion',
            'dispositivos': 'dispositivos',
            'perfiles': 'perfiles'
        }

        self._id = id
        self._nombre = nombre
        self._correo_electronico = correo_electronico
        self._password = password
        self._pais = pais
        self._plan_suscripcion = plan_suscripcion
        self._dispositivos = dispositivos
        self._perfiles = perfiles

    @classmethod
    def from_dict(cls, dikt) -> 'UsuarioUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UsuarioUpdate of this UsuarioUpdate.  # noqa: E501
        :rtype: UsuarioUpdate
        """
        return util.deserialize_model(dikt, cls)
    
    def to_db_model(self):
        from openapi_server.models.usuario_db import UsuarioDB
        return UsuarioDB(
            nombre=self.nombre,
            correo_electronico=self.correo_electronico,
            password=self.password,
            pais=self.pais,
            plan_suscripcion=self.plan_suscripcion,
        )

    @property
    def id(self) -> int:
        """Gets the id of this UsuarioUpdate.


        :return: The id of this UsuarioUpdate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UsuarioUpdate.


        :param id: The id of this UsuarioUpdate.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def nombre(self) -> str:
        """Gets the nombre of this UsuarioUpdate.


        :return: The nombre of this UsuarioUpdate.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """Sets the nombre of this UsuarioUpdate.


        :param nombre: The nombre of this UsuarioUpdate.
        :type nombre: str
        """
        if nombre is None:
            raise ValueError("Invalid value for `nombre`, must not be `None`")  # noqa: E501

        self._nombre = nombre

    @property
    def correo_electronico(self) -> str:
        """Gets the correo_electronico of this UsuarioUpdate.


        :return: The correo_electronico of this UsuarioUpdate.
        :rtype: str
        """
        return self._correo_electronico

    @correo_electronico.setter
    def correo_electronico(self, correo_electronico: str):
        """Sets the correo_electronico of this UsuarioUpdate.


        :param correo_electronico: The correo_electronico of this UsuarioUpdate.
        :type correo_electronico: str
        """
        if correo_electronico is None:
            raise ValueError("Invalid value for `correo_electronico`, must not be `None`")  # noqa: E501

        self._correo_electronico = correo_electronico
    
    @property
    def password(self) -> str:
        """Gets the password of this UsuarioUpdate.


        :return: The password of this UsuarioUpdate.
        :rtype: str
        """
        return self._password
    
    @password.setter
    def password(self, password: str):
        """Sets the password of this UsuarioUpdate.


        :param password: The password of this UsuarioUpdate.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def pais(self) -> str:
        """Gets the pais of this UsuarioUpdate.


        :return: The pais of this UsuarioUpdate.
        :rtype: str
        """
        return self._pais

    @pais.setter
    def pais(self, pais: str):
        """Sets the pais of this UsuarioUpdate.


        :param pais: The pais of this UsuarioUpdate.
        :type pais: str
        """

        self._pais = pais

    @property
    def plan_suscripcion(self) -> str:
        """Gets the plan_suscripcion of this UsuarioUpdate.


        :return: The plan_suscripcion of this UsuarioUpdate.
        :rtype: str
        """
        return self._plan_suscripcion

    @plan_suscripcion.setter
    def plan_suscripcion(self, plan_suscripcion: str):
        """Sets the plan_suscripcion of this UsuarioUpdate.


        :param plan_suscripcion: The plan_suscripcion of this UsuarioUpdate.
        :type plan_suscripcion: str
        """
        allowed_values = ["Basico", "Estandar", "Premium"]  # noqa: E501
        if plan_suscripcion not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_suscripcion` ({0}), must be one of {1}"
                .format(plan_suscripcion, allowed_values)
            )

        self._plan_suscripcion = plan_suscripcion

    @property
    def dispositivos(self) -> List[str]:
        """Gets the dispositivos of this UsuarioUpdate.


        :return: The dispositivos of this UsuarioUpdate.
        :rtype: List[str]
        """
        return self._dispositivos

    @dispositivos.setter
    def dispositivos(self, dispositivos: List[str]):
        """Sets the dispositivos of this UsuarioUpdate.


        :param dispositivos: The dispositivos of this UsuarioUpdate.
        :type dispositivos: List[str]
        """

        self._dispositivos = dispositivos

    @property
    def perfiles(self) -> List[Perfil]:
        """Gets the perfiles of this UsuarioUpdate.


        :return: The perfiles of this UsuarioUpdate.
        :rtype: List[Perfil]
        """
        return self._perfiles

    @perfiles.setter
    def perfiles(self, perfiles: List[Perfil]):
        """Sets the perfiles of this UsuarioUpdate.


        :param perfiles: The perfiles of this UsuarioUpdate.
        :type perfiles: List[Perfil]
        """

        self._perfiles = perfiles
